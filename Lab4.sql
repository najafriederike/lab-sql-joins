-- Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;

-- 1. List the number of films per category.
SELECT SUM(fc.film_id) as number_of_films, c.name FROM sakila.film_category AS fc
JOIN sakila.category AS c
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY number_of_films DESC;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id, ci.city, co.country 
FROM sakila.store AS s
JOIN sakila.address AS a
ON s.address_id = a.address_id
JOIN sakila.city AS ci
ON a.city_id = ci.city_id
JOIN sakila.country AS co
ON ci.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT cu.store_id AS store, SUM(pay.amount) AS total_revenue FROM sakila.payment AS pay
JOIN sakila.customer AS cu
GROUP BY cu.store_id;

-- SELECT COUNT(amount), AVG(amount) FROM sakila.payment;
-- SELECT pay.amount, pay.customer_id FROM sakila.payment AS pay
-- SELECT du.customer_id, cu.store_id FROM sakila.customer AS cu

-- 4. Determine the average running time of films for each category.
SELECT ca.name AS film_category, ROUND(AVG(length),2) AS avg_running_time
FROM sakila.film AS fi
JOIN sakila.film_category AS fc
ON fi.film_id = fc.film_id
JOIN sakila.category AS ca
ON fc.category_id = ca.category_id
GROUP BY film_category
ORDER BY film_category ASC;

-- 5. Identify the film categories with the longest average running time.
SELECT ca.name AS film_category, ROUND(AVG(length),2) AS avg_running_time
FROM sakila.film AS fi
JOIN sakila.film_category AS fc
ON fi.film_id = fc.film_id
JOIN sakila.category AS ca
ON fc.category_id = ca.category_id
GROUP BY film_category
ORDER BY avg_running_time DESC;

-- 6. Display the top 10 most frequently rented movies in descending order.
-- rental -> inventory -> film
SELECT f.title, COUNT(r.inventory_id) AS rent_frequency FROM sakila.rental AS r
JOIN sakila.inventory AS i
ON r.inventory_id = i.inventory_id
JOIN sakila.film AS f
ON i.film_id = f.film_id 
GROUP BY f.title
ORDER BY COUNT(r.inventory_id) DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
-- inventory (store_id, film_id) -> film (film_id, title) 
SELECT f.title, 
CASE
	WHEN i.store_id = 1 THEN 'Available in Store 1'
    WHEN i.store_id = 2 THEN 'Available in Store 2'
    ELSE 'Not available.'
END AS availability
FROM sakila.film AS f
JOIN sakila.inventory AS i
ON f.film_id = i.film_id
GROUP BY f.title, i.store_id
HAVING f.title = 'Academy Dinosaur' AND i.store_id = 1;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a CASE statement combined with IFNULL."

SELECT f.title,
MAX(CASE
	WHEN i.inventory_id IS NOT NULL THEN 'Available'
    WHEN i.inventory_id IS NULL THEN 'Not available'
    ELSE 'NA'
END) AS availability
FROM sakila.film AS f
LEFT JOIN sakila.inventory AS i
ON f.film_id = i.film_id
GROUP BY f.title
ORDER BY f.title ASC;
